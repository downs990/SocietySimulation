// SocietySimulation.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
  
#include <Windows.h> 
#include <fstream>
#include <iostream>
#include <json\value.h>
#include <json\json.h>

#include "Person.h"
#include "Environment.h"
#include "EnvironmentManager.h"

using std::cout; 
using std::cin;
using std::to_string;
using std::ofstream;
using std::ifstream;




vector<Environment> world;

void createDatabase() {
	// TODO: Create a MongoDB 
	// TODO: Create database shcema and designs (update design docs)
	// TODO: Add logs to this db in main sim loop
}


// Populates the world variable with objects generated from 
// values in the "WorldConfiguration.json" file. 
void readWorldDataFromConfigFile() {

	Json::Reader reader;   
	Json::Value newValue;   
	Json::StyledStreamWriter writer;  
	ofstream newFile;

	//opening file using fstream
	ifstream file("C:\\Users\\downs\\Desktop\\VisualStudioWorkspace\\SocietySimulation\\SocietySimulation\\WorldConfiguration.json");

	// check if there is any error is getting data from the json file
	if (!reader.parse(file, newValue)) {
		cout << reader.getFormattedErrorMessages();
	} 
	 

	// Generate environment objects from Json World file.
	int x = 0;
	Json::Value environmentsToCreate = newValue["Environments"];
	for (Json::Value env : environmentsToCreate) {
		
		string type = env["Type"].asString();
		int count = env["Count"].asInt();
		int populationSize = env["PopulationSize"].asInt();
		  

		for (int i = 0; i < count; i++) {
			Environment newEnvironment = Environment(x, type);
			newEnvironment.addCondition(EnvironmentalCondition::HIGH_PRODUCTIVITY);

			for (int j = 0; j < populationSize; j++) {
				
				Person newPerson = Person(i+j);
				newEnvironment.addPerson(&newPerson);
			}

			world.push_back(newEnvironment);
			x++;
		}
	 
	}

	// Print world for debugging
	for (Environment env : world) {
		cout << env.toString();
	}

 

}



////Updating the json data
//newValue["Category"] = "Technical";

////we can add new values as well
//newValue["first"] = "Shishank";
//newValue["last"] = "Jain";

//// make the changes in a new file/original file
//newFile.open("items.json");
//writer.write(newFile, newValue);
//newFile.close();


// ( MVP ) Minimum Viable Product 
int main()
{

	// TOOD: 
	// Randomly generated by a component.
	// HistoricEvent he1 = HistoricEvent(<ALL_THRESHOLDS>);
	// HistoricEvent he2 = HistoricEvent(<ALL_THRESHOLDS>);
	//                 ...


	Person person1 = Person(1);
	person1.addTaskToSchedule("S", "9:00a", "5:00p", "Work");
	person1.addTaskToSchedule("S", "5:40p", "7:40p", "School");
	person1.addTaskToSchedule("S", "8:00p", "EOD", "Home");


	string p1String = person1.toString();
	cout << "Schedule: \n" << person1.getSchedule().toString() << "\n";
	cout << "Person1 Before: " << person1.toString() << "\n";
	   
	  
	 
	// Attaches all decision trees to associated environment types. 
	EnvironmentManager envManager = EnvironmentManager(world);
	

	int const SECONDS_IN_HOUR = 3600;
	time_t now = time(0);



	readWorldDataFromConfigFile();
	createDatabase();

	//while (true) { 


	//	// TODO: Log the state of the simulation every frame to a file. 
	//	//     Either specific Env/Persons or entire world. 
	//	struct tm newtime; 
	//	now += SECONDS_IN_HOUR;
	//	localtime_s(&newtime, &now);

	//	// Simulation clock: 1 second = 1 hour 
	//	int month = 1 + newtime.tm_mon;
	//	int day = newtime.tm_mday;
	//	int year = 1900 + newtime.tm_year;
	//	cout << "Date: " << month << ", " << day << " " << year << "\n";
	//	cout << "Time: " << newtime.tm_hour << ":" << newtime.tm_min << ":" << newtime.tm_sec << "\n";
	// 	
	//	// TODO: What the best way to pause the sim? 
	//	//		1. Non-blocking cin
	//	//		2. Change value in file that's being constantly read from in main loop
	//

	//	//int num = 0;
	//	//cout << "Enter a number: ";
	//	//cin >> num;


	//	// 1. .applyConditions() for each env in world. (updates population state/mood)
	//	for (Environment *currentEnv : world) {
	//		envManager.applyConditions();
	//		envManager.evaluateDecisions();
	//	}

	//	cout << "Person1 After: " << person1.toString() << "\n\n\n";




	//	// 2. Update sim clock by 1 minutes (because shedules are minute specific)
	//	// 3. Check each Person in each env population for Schedule next task. (change location or social interaction)


	//	// 4. Loop through country to check all Person's state (salary, literacy, etc.) 
	//	//		for Historic Event threshold properties. 
	//	// 5. Use those values to check for and keep track of any Historic Event's that occur.  
	//	
	//	Sleep(1000); 
	//}


	 

	 
	  
 



	cout << "\n\n\n";
}




// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
